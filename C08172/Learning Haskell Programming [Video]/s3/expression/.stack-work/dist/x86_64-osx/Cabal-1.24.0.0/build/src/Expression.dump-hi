
==================== FINAL INTERFACE ====================
2016-11-05 17:42:37.811009 UTC

interface expression-0.1.0.0-LLH3ZZG0tgVL93rajMeVXb:Expression 8001
  interface hash: 70255f2f2a4d9408f712012884223456
  ABI hash: fd14bd5ab7c4b76a3b4bdf5c5d1ef77d
  export-list hash: 648ca741968c70cd398dd1eb72a9797f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: a4046e0fdab24403354cf30558c1ea1c
  sig of: Nothing
  used TH splices: False
  where
exports:
  Expression.calculate
  Expression.Expression{Expression.Add Expression.Number Expression.Subtract}
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
f999dc648cda69b9b154e835a54ff691
  $fEqExpression :: GHC.Classes.Eq Expression.Expression
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Expression.Expression
                  Expression.$fEqExpression_$c==
                  Expression.$fEqExpression_$c/= -}
f999dc648cda69b9b154e835a54ff691
  $fEqExpression_$c/= ::
    Expression.Expression -> Expression.Expression -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Expression.Expression) (b :: Expression.Expression) ->
                 case Expression.$fEqExpression_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
f999dc648cda69b9b154e835a54ff691
  $fEqExpression_$c== ::
    Expression.Expression -> Expression.Expression -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
f999dc648cda69b9b154e835a54ff691
  $fOrdExpression :: GHC.Classes.Ord Expression.Expression
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Expression.Expression
                  Expression.$fEqExpression
                  Expression.$fOrdExpression_$ccompare
                  Expression.$fOrdExpression_$c<
                  Expression.$fOrdExpression_$c<=
                  Expression.$fOrdExpression_$c>
                  Expression.$fOrdExpression_$c>=
                  Expression.$fOrdExpression_$cmax
                  Expression.$fOrdExpression_$cmin -}
f999dc648cda69b9b154e835a54ff691
  $fOrdExpression_$c< ::
    Expression.Expression -> Expression.Expression -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
f999dc648cda69b9b154e835a54ff691
  $fOrdExpression_$c<= ::
    Expression.Expression -> Expression.Expression -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
f999dc648cda69b9b154e835a54ff691
  $fOrdExpression_$c> ::
    Expression.Expression -> Expression.Expression -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
f999dc648cda69b9b154e835a54ff691
  $fOrdExpression_$c>= ::
    Expression.Expression -> Expression.Expression -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
f999dc648cda69b9b154e835a54ff691
  $fOrdExpression_$ccompare ::
    Expression.Expression
    -> Expression.Expression -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
f999dc648cda69b9b154e835a54ff691
  $fOrdExpression_$cmax ::
    Expression.Expression
    -> Expression.Expression -> Expression.Expression
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Expression.Expression) (y :: Expression.Expression) ->
                 case Expression.$fOrdExpression_$c<= x y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
f999dc648cda69b9b154e835a54ff691
  $fOrdExpression_$cmin ::
    Expression.Expression
    -> Expression.Expression -> Expression.Expression
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Expression.Expression) (y :: Expression.Expression) ->
                 case Expression.$fOrdExpression_$c<= x y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
f999dc648cda69b9b154e835a54ff691
  $fShowExpression :: GHC.Show.Show Expression.Expression
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Expression.Expression
                  Expression.$fShowExpression_$cshowsPrec
                  Expression.$fShowExpression_$cshow
                  Expression.$fShowExpression_$cshowList -}
f999dc648cda69b9b154e835a54ff691
  $fShowExpression1 :: Expression.Expression -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Expression.Expression)
                   (w1 :: GHC.Base.String) ->
                 Expression.$w$cshowsPrec 0# w w1) -}
f999dc648cda69b9b154e835a54ff691
  $fShowExpression_$cshow :: Expression.Expression -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Expression.Expression) ->
                 Expression.$fShowExpression_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f999dc648cda69b9b154e835a54ff691
  $fShowExpression_$cshowList ::
    [Expression.Expression] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Expression.Expression
                   Expression.$fShowExpression1) -}
f999dc648cda69b9b154e835a54ff691
  $fShowExpression_$cshowsPrec ::
    GHC.Types.Int -> Expression.Expression -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Expression.Expression)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Expression.$w$cshowsPrec ww1 w1 w2 }) -}
320b5f6af94b163f97b8246381550210
  $tc'Add :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11672420135463926845##
                   14569338263641292157##
                   Expression.$trModule
                   Expression.$tc'Add1) -}
634f11eace2fb3f461032dd405f6b529
  $tc'Add1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Add"#) -}
42b155a7f52bef92345ce4fdc35ee637
  $tc'Number :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12607718721203138712##
                   3659965502647211943##
                   Expression.$trModule
                   Expression.$tc'Number1) -}
3eda91e058f0a404702673224b389f9b
  $tc'Number1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Number"#) -}
4aa5b53325439a555b4794a5180a8fe4
  $tc'Subtract :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16146667292977677888##
                   9495465919882111373##
                   Expression.$trModule
                   Expression.$tc'Subtract1) -}
6b11e63b12f706769848c05ccb37ed20
  $tc'Subtract1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Subtract"#) -}
04768394270f373bc8b63119167bba87
  $tcExpression :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   725376319300535354##
                   14663619787929265155##
                   Expression.$trModule
                   Expression.$trModule1) -}
244b7b7cdf2d77ec722b8aa5fa3248dd
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Expression.$trModule2
                   Expression.$trModule1) -}
bc8d9ee842f135a3868b9ae7491b4ef7
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Expression"#) -}
0ba076ba475186e62fcdc1a50ef50293
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "expression-0.1.0.0-LLH3ZZG0tgVL93rajMeVXb"#) -}
f999dc648cda69b9b154e835a54ff691
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Expression.Expression -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0] -}
f999dc648cda69b9b154e835a54ff691
  data Expression
    = Number GHC.Types.Int
    | Add Expression.Expression Expression.Expression
    | Subtract Expression.Expression Expression.Expression
709940fbc2c5301fbb8f394fe4551b2c
  calculate :: Expression.Expression -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
instance [safe] GHC.Classes.Eq [Expression.Expression]
  = Expression.$fEqExpression
instance [safe] GHC.Classes.Ord [Expression.Expression]
  = Expression.$fOrdExpression
instance [safe] GHC.Show.Show [Expression.Expression]
  = Expression.$fShowExpression
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

